{"name":"mysql","version":"3.3.0-alpha.1709620625+861cdb85","description":"A Pulumi package for creating and managing mysql cloud resources.","keywords":["pulumi","mysql"],"homepage":"https://pulumi.io","license":"Apache-2.0","attribution":"This Pulumi package is based on the [`mysql` Terraform Provider](https://github.com/terraform-providers/terraform-provider-mysql).","repository":"https://github.com/pulumi/pulumi-mysql","meta":{"moduleFormat":"(.*)(?:/[^/]*)"},"language":{"csharp":{"packageReferences":{"Pulumi":"3.*-*"},"namespaces":{"mysql":"MySql"},"compatibility":"tfbridge20"},"go":{"importBasePath":"github.com/pulumi/pulumi-mysql/sdk/v3/go/mysql","generateResourceContainerTypes":true,"generateExtraInputTypes":true},"nodejs":{"packageDescription":"A Pulumi package for creating and managing mysql cloud resources.","readme":"\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-mysql)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-mysql` repo](https://github.com/pulumi/pulumi-mysql/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-mysql` repo](https://github.com/terraform-providers/terraform-provider-mysql/issues).","dependencies":{"@pulumi/pulumi":"^3.0.0-alpha.0"},"devDependencies":{"@types/mime":"^2.0.0","@types/node":"^10.0.0"},"compatibility":"tfbridge20","disableUnionOutputTypes":true},"python":{"requires":{"pulumi":"\u003e=3.0.0a1,\u003c4.0.0"},"readme":"\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-mysql)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-mysql` repo](https://github.com/pulumi/pulumi-mysql/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-mysql` repo](https://github.com/terraform-providers/terraform-provider-mysql/issues).","compatibility":"tfbridge20","pyproject":{"enabled":true}}},"config":{"variables":{"authenticationPlugin":{"type":"string"},"endpoint":{"type":"string"},"maxConnLifetimeSec":{"type":"integer"},"maxOpenConns":{"type":"integer"},"password":{"type":"string"},"proxy":{"type":"string","defaultInfo":{"environment":["ALL_PROXY","all_proxy"]}},"tls":{"type":"string","default":"false","defaultInfo":{"environment":["MYSQL_TLS_CONFIG"]}},"username":{"type":"string"}},"defaults":["endpoint","username"]},"provider":{"description":"The provider type for the mysql package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n","properties":{"authenticationPlugin":{"type":"string"},"endpoint":{"type":"string"},"maxConnLifetimeSec":{"type":"integer"},"maxOpenConns":{"type":"integer"},"password":{"type":"string"},"proxy":{"type":"string"},"tls":{"type":"string"},"username":{"type":"string"}},"required":["endpoint","username"],"inputProperties":{"authenticationPlugin":{"type":"string"},"endpoint":{"type":"string"},"maxConnLifetimeSec":{"type":"integer"},"maxOpenConns":{"type":"integer"},"password":{"type":"string"},"proxy":{"type":"string","defaultInfo":{"environment":["ALL_PROXY","all_proxy"]}},"tls":{"type":"string","default":"false","defaultInfo":{"environment":["MYSQL_TLS_CONFIG"]}},"username":{"type":"string"}},"requiredInputs":["endpoint","username"]},"resources":{"mysql:index/database:Database":{"description":"The ``mysql.Database`` resource creates and manages a database on a MySQL\nserver.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst app = new mysql.Database(\"app\", {});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\napp = mysql.Database(\"app\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var app = new MySql.Database(\"app\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v3/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewDatabase(ctx, \"app\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.Database;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var app = new Database(\"app\");\n\n    }\n}\n```\n```yaml\nresources:\n  app:\n    type: mysql:Database\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nDatabases can be imported using their name, e.g.\n\n```sh\n $ pulumi import mysql:index/database:Database example my-example-database\n```\n ","properties":{"defaultCharacterSet":{"type":"string","description":"The default character set to use when\na table is created without specifying an explicit character set. Defaults\nto \"utf8\".\n"},"defaultCollation":{"type":"string","description":"The default collation to use when a table\nis created without specifying an explicit collation. Defaults to\n``utf8_general_ci``. Each character set has its own set of collations, so\nchanging the character set requires also changing the collation.\n\nNote that the defaults for character set and collation above do not respect\nany defaults set on the MySQL server, so that the configuration can be set\nappropriately even though this provider cannot see the server-level defaults. If\nyou wish to use the server's defaults you must consult the server's\nconfiguration and then set the ``default_character_set`` and\n``default_collation`` to match.\n"},"name":{"type":"string","description":"The name of the database. This must be unique within\na given MySQL server and may or may not be case-sensitive depending on\nthe operating system on which the MySQL server is running.\n"}},"required":["name"],"inputProperties":{"defaultCharacterSet":{"type":"string","description":"The default character set to use when\na table is created without specifying an explicit character set. Defaults\nto \"utf8\".\n"},"defaultCollation":{"type":"string","description":"The default collation to use when a table\nis created without specifying an explicit collation. Defaults to\n``utf8_general_ci``. Each character set has its own set of collations, so\nchanging the character set requires also changing the collation.\n\nNote that the defaults for character set and collation above do not respect\nany defaults set on the MySQL server, so that the configuration can be set\nappropriately even though this provider cannot see the server-level defaults. If\nyou wish to use the server's defaults you must consult the server's\nconfiguration and then set the ``default_character_set`` and\n``default_collation`` to match.\n"},"name":{"type":"string","description":"The name of the database. This must be unique within\na given MySQL server and may or may not be case-sensitive depending on\nthe operating system on which the MySQL server is running.\n","willReplaceOnChanges":true}},"stateInputs":{"description":"Input properties used for looking up and filtering Database resources.\n","properties":{"defaultCharacterSet":{"type":"string","description":"The default character set to use when\na table is created without specifying an explicit character set. Defaults\nto \"utf8\".\n"},"defaultCollation":{"type":"string","description":"The default collation to use when a table\nis created without specifying an explicit collation. Defaults to\n``utf8_general_ci``. Each character set has its own set of collations, so\nchanging the character set requires also changing the collation.\n\nNote that the defaults for character set and collation above do not respect\nany defaults set on the MySQL server, so that the configuration can be set\nappropriately even though this provider cannot see the server-level defaults. If\nyou wish to use the server's defaults you must consult the server's\nconfiguration and then set the ``default_character_set`` and\n``default_collation`` to match.\n"},"name":{"type":"string","description":"The name of the database. This must be unique within\na given MySQL server and may or may not be case-sensitive depending on\nthe operating system on which the MySQL server is running.\n","willReplaceOnChanges":true}},"type":"object"}},"mysql:index/grant:Grant":{"description":"The ``mysql.Grant`` resource creates and manages privileges given to\na user on a MySQL server.\n\n## Examples \n\n### Granting Privileges to a User\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst jdoeUser = new mysql.User(\"jdoeUser\", {\n    host: \"example.com\",\n    plaintextPassword: \"password\",\n    user: \"jdoe\",\n});\nconst jdoeGrant = new mysql.Grant(\"jdoeGrant\", {\n    database: \"app\",\n    host: jdoeUser.host,\n    privileges: [\n        \"SELECT\",\n        \"UPDATE\",\n    ],\n    user: jdoeUser.user,\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\njdoe_user = mysql.User(\"jdoeUser\",\n    host=\"example.com\",\n    plaintext_password=\"password\",\n    user=\"jdoe\")\njdoe_grant = mysql.Grant(\"jdoeGrant\",\n    database=\"app\",\n    host=jdoe_user.host,\n    privileges=[\n        \"SELECT\",\n        \"UPDATE\",\n    ],\n    user=jdoe_user.user)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jdoeUser = new MySql.User(\"jdoeUser\", new()\n    {\n        Host = \"example.com\",\n        PlaintextPassword = \"password\",\n        UserName = \"jdoe\",\n    });\n\n    var jdoeGrant = new MySql.Grant(\"jdoeGrant\", new()\n    {\n        Database = \"app\",\n        Host = jdoeUser.Host,\n        Privileges = new[]\n        {\n            \"SELECT\",\n            \"UPDATE\",\n        },\n        User = jdoeUser.UserName,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v3/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjdoeUser, err := mysql.NewUser(ctx, \"jdoeUser\", \u0026mysql.UserArgs{\n\t\t\tHost:              pulumi.String(\"example.com\"),\n\t\t\tPlaintextPassword: pulumi.String(\"password\"),\n\t\t\tUser:              pulumi.String(\"jdoe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = mysql.NewGrant(ctx, \"jdoeGrant\", \u0026mysql.GrantArgs{\n\t\t\tDatabase: pulumi.String(\"app\"),\n\t\t\tHost:     jdoeUser.Host,\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t},\n\t\t\tUser: jdoeUser.User,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport com.pulumi.mysql.Grant;\nimport com.pulumi.mysql.GrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var jdoeUser = new User(\"jdoeUser\", UserArgs.builder()        \n            .host(\"example.com\")\n            .plaintextPassword(\"password\")\n            .user(\"jdoe\")\n            .build());\n\n        var jdoeGrant = new Grant(\"jdoeGrant\", GrantArgs.builder()        \n            .database(\"app\")\n            .host(jdoeUser.host())\n            .privileges(            \n                \"SELECT\",\n                \"UPDATE\")\n            .user(jdoeUser.user())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  jdoeUser:\n    type: mysql:User\n    properties:\n      host: example.com\n      plaintextPassword: password\n      user: jdoe\n  jdoeGrant:\n    type: mysql:Grant\n    properties:\n      database: app\n      host: ${jdoeUser.host}\n      privileges:\n        - SELECT\n        - UPDATE\n      user: ${jdoeUser.user}\n```\n\n### Granting Privileges to a Role\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst developerRole = new mysql.Role(\"developerRole\", {});\nconst developerGrant = new mysql.Grant(\"developerGrant\", {\n    database: \"app\",\n    privileges: [\n        \"SELECT\",\n        \"UPDATE\",\n    ],\n    role: developerRole.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\ndeveloper_role = mysql.Role(\"developerRole\")\ndeveloper_grant = mysql.Grant(\"developerGrant\",\n    database=\"app\",\n    privileges=[\n        \"SELECT\",\n        \"UPDATE\",\n    ],\n    role=developer_role.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var developerRole = new MySql.Role(\"developerRole\");\n\n    var developerGrant = new MySql.Grant(\"developerGrant\", new()\n    {\n        Database = \"app\",\n        Privileges = new[]\n        {\n            \"SELECT\",\n            \"UPDATE\",\n        },\n        Role = developerRole.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v3/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdeveloperRole, err := mysql.NewRole(ctx, \"developerRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = mysql.NewGrant(ctx, \"developerGrant\", \u0026mysql.GrantArgs{\n\t\t\tDatabase: pulumi.String(\"app\"),\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t},\n\t\t\tRole: developerRole.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.Role;\nimport com.pulumi.mysql.Grant;\nimport com.pulumi.mysql.GrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var developerRole = new Role(\"developerRole\");\n\n        var developerGrant = new Grant(\"developerGrant\", GrantArgs.builder()        \n            .database(\"app\")\n            .privileges(            \n                \"SELECT\",\n                \"UPDATE\")\n            .role(developerRole.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  developerRole:\n    type: mysql:Role\n  developerGrant:\n    type: mysql:Grant\n    properties:\n      database: app\n      privileges:\n        - SELECT\n        - UPDATE\n      role: ${developerRole.name}\n```\n\n### Adding a Role to a User\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst jdoe = new mysql.User(\"jdoe\", {\n    host: \"example.com\",\n    plaintextPassword: \"password\",\n    user: \"jdoe\",\n});\nconst developerRole = new mysql.Role(\"developerRole\", {});\nconst developerGrant = new mysql.Grant(\"developerGrant\", {\n    database: \"app\",\n    host: jdoe.host,\n    roles: [developerRole.name],\n    user: jdoe.user,\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\njdoe = mysql.User(\"jdoe\",\n    host=\"example.com\",\n    plaintext_password=\"password\",\n    user=\"jdoe\")\ndeveloper_role = mysql.Role(\"developerRole\")\ndeveloper_grant = mysql.Grant(\"developerGrant\",\n    database=\"app\",\n    host=jdoe.host,\n    roles=[developer_role.name],\n    user=jdoe.user)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jdoe = new MySql.User(\"jdoe\", new()\n    {\n        Host = \"example.com\",\n        PlaintextPassword = \"password\",\n        UserName = \"jdoe\",\n    });\n\n    var developerRole = new MySql.Role(\"developerRole\");\n\n    var developerGrant = new MySql.Grant(\"developerGrant\", new()\n    {\n        Database = \"app\",\n        Host = jdoe.Host,\n        Roles = new[]\n        {\n            developerRole.Name,\n        },\n        User = jdoe.UserName,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v3/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjdoe, err := mysql.NewUser(ctx, \"jdoe\", \u0026mysql.UserArgs{\n\t\t\tHost:              pulumi.String(\"example.com\"),\n\t\t\tPlaintextPassword: pulumi.String(\"password\"),\n\t\t\tUser:              pulumi.String(\"jdoe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdeveloperRole, err := mysql.NewRole(ctx, \"developerRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = mysql.NewGrant(ctx, \"developerGrant\", \u0026mysql.GrantArgs{\n\t\t\tDatabase: pulumi.String(\"app\"),\n\t\t\tHost:     jdoe.Host,\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tdeveloperRole.Name,\n\t\t\t},\n\t\t\tUser: jdoe.User,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport com.pulumi.mysql.Role;\nimport com.pulumi.mysql.Grant;\nimport com.pulumi.mysql.GrantArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var jdoe = new User(\"jdoe\", UserArgs.builder()        \n            .host(\"example.com\")\n            .plaintextPassword(\"password\")\n            .user(\"jdoe\")\n            .build());\n\n        var developerRole = new Role(\"developerRole\");\n\n        var developerGrant = new Grant(\"developerGrant\", GrantArgs.builder()        \n            .database(\"app\")\n            .host(jdoe.host())\n            .roles(developerRole.name())\n            .user(jdoe.user())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  jdoe:\n    type: mysql:User\n    properties:\n      host: example.com\n      plaintextPassword: password\n      user: jdoe\n  developerRole:\n    type: mysql:Role\n  developerGrant:\n    type: mysql:Grant\n    properties:\n      database: app\n      host: ${jdoe.host}\n      roles:\n        - ${developerRole.name}\n      user: ${jdoe.user}\n```\n","properties":{"database":{"type":"string","description":"The database to grant privileges on.\n"},"grant":{"type":"boolean","description":"Whether to also give the user privileges to grant the same privileges to other users.\n","language":{"csharp":{"name":"GrantName"}}},"host":{"type":"string","description":"The source host of the user. Defaults to \"localhost\". Conflicts with `role`.\n"},"privileges":{"type":"array","items":{"type":"string"},"description":"A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.\n"},"role":{"type":"string","description":"The role to grant `privileges` to. Conflicts with `user` and `host`.\n"},"roles":{"type":"array","items":{"type":"string"},"description":"A list of rols to grant to the user. Conflicts with `privileges`.\n"},"table":{"type":"string","description":"Which table to grant `privileges` on. Defaults to `*`, which is all tables.\n"},"tlsOption":{"type":"string","description":"An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.\n"},"user":{"type":"string","description":"The name of the user. Conflicts with `role`.\n"}},"required":["database"],"inputProperties":{"database":{"type":"string","description":"The database to grant privileges on.\n","willReplaceOnChanges":true},"grant":{"type":"boolean","description":"Whether to also give the user privileges to grant the same privileges to other users.\n","language":{"csharp":{"name":"GrantName"}},"willReplaceOnChanges":true},"host":{"type":"string","description":"The source host of the user. Defaults to \"localhost\". Conflicts with `role`.\n","willReplaceOnChanges":true},"privileges":{"type":"array","items":{"type":"string"},"description":"A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.\n","willReplaceOnChanges":true},"role":{"type":"string","description":"The role to grant `privileges` to. Conflicts with `user` and `host`.\n","willReplaceOnChanges":true},"roles":{"type":"array","items":{"type":"string"},"description":"A list of rols to grant to the user. Conflicts with `privileges`.\n","willReplaceOnChanges":true},"table":{"type":"string","description":"Which table to grant `privileges` on. Defaults to `*`, which is all tables.\n","willReplaceOnChanges":true},"tlsOption":{"type":"string","description":"An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.\n","willReplaceOnChanges":true},"user":{"type":"string","description":"The name of the user. Conflicts with `role`.\n","willReplaceOnChanges":true}},"requiredInputs":["database"],"stateInputs":{"description":"Input properties used for looking up and filtering Grant resources.\n","properties":{"database":{"type":"string","description":"The database to grant privileges on.\n","willReplaceOnChanges":true},"grant":{"type":"boolean","description":"Whether to also give the user privileges to grant the same privileges to other users.\n","language":{"csharp":{"name":"GrantName"}},"willReplaceOnChanges":true},"host":{"type":"string","description":"The source host of the user. Defaults to \"localhost\". Conflicts with `role`.\n","willReplaceOnChanges":true},"privileges":{"type":"array","items":{"type":"string"},"description":"A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.\n","willReplaceOnChanges":true},"role":{"type":"string","description":"The role to grant `privileges` to. Conflicts with `user` and `host`.\n","willReplaceOnChanges":true},"roles":{"type":"array","items":{"type":"string"},"description":"A list of rols to grant to the user. Conflicts with `privileges`.\n","willReplaceOnChanges":true},"table":{"type":"string","description":"Which table to grant `privileges` on. Defaults to `*`, which is all tables.\n","willReplaceOnChanges":true},"tlsOption":{"type":"string","description":"An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.\n","willReplaceOnChanges":true},"user":{"type":"string","description":"The name of the user. Conflicts with `role`.\n","willReplaceOnChanges":true}},"type":"object"}},"mysql:index/role:Role":{"description":"The ``mysql.Role`` resource creates and manages a user on a MySQL\nserver.\n\n\u003e **Note:** MySQL introduced roles in version 8. They do not work on MySQL 5 and lower.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst developer = new mysql.Role(\"developer\", {});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\ndeveloper = mysql.Role(\"developer\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var developer = new MySql.Role(\"developer\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v3/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewRole(ctx, \"developer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.Role;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var developer = new Role(\"developer\");\n\n    }\n}\n```\n```yaml\nresources:\n  developer:\n    type: mysql:Role\n```\n{{% /example %}}\n{{% /examples %}}","properties":{"name":{"type":"string","description":"The name of the role.\n"}},"required":["name"],"inputProperties":{"name":{"type":"string","description":"The name of the role.\n","willReplaceOnChanges":true}},"stateInputs":{"description":"Input properties used for looking up and filtering Role resources.\n","properties":{"name":{"type":"string","description":"The name of the role.\n","willReplaceOnChanges":true}},"type":"object"}},"mysql:index/user:User":{"description":"The ``mysql.User`` resource creates and manages a user on a MySQL\nserver.\n\n## Examples\n\n### Basic Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst jdoe = new mysql.User(\"jdoe\", {\n    host: \"example.com\",\n    plaintextPassword: \"password\",\n    user: \"jdoe\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\njdoe = mysql.User(\"jdoe\",\n    host=\"example.com\",\n    plaintext_password=\"password\",\n    user=\"jdoe\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jdoe = new MySql.User(\"jdoe\", new()\n    {\n        Host = \"example.com\",\n        PlaintextPassword = \"password\",\n        UserName = \"jdoe\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v3/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewUser(ctx, \"jdoe\", \u0026mysql.UserArgs{\n\t\t\tHost:              pulumi.String(\"example.com\"),\n\t\t\tPlaintextPassword: pulumi.String(\"password\"),\n\t\t\tUser:              pulumi.String(\"jdoe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var jdoe = new User(\"jdoe\", UserArgs.builder()        \n            .host(\"example.com\")\n            .plaintextPassword(\"password\")\n            .user(\"jdoe\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  jdoe:\n    type: mysql:User\n    properties:\n      host: example.com\n      plaintextPassword: password\n      user: jdoe\n```\n\n### Example Usage with an Authentication Plugin\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst nologin = new mysql.User(\"nologin\", {\n    authPlugin: \"mysql_no_login\",\n    host: \"example.com\",\n    user: \"nologin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nnologin = mysql.User(\"nologin\",\n    auth_plugin=\"mysql_no_login\",\n    host=\"example.com\",\n    user=\"nologin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var nologin = new MySql.User(\"nologin\", new()\n    {\n        AuthPlugin = \"mysql_no_login\",\n        Host = \"example.com\",\n        UserName = \"nologin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v3/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewUser(ctx, \"nologin\", \u0026mysql.UserArgs{\n\t\t\tAuthPlugin: pulumi.String(\"mysql_no_login\"),\n\t\t\tHost:       pulumi.String(\"example.com\"),\n\t\t\tUser:       pulumi.String(\"nologin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.mysql.User;\nimport com.pulumi.mysql.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var nologin = new User(\"nologin\", UserArgs.builder()        \n            .authPlugin(\"mysql_no_login\")\n            .host(\"example.com\")\n            .user(\"nologin\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  nologin:\n    type: mysql:User\n    properties:\n      authPlugin: mysql_no_login\n      host: example.com\n      user: nologin\n```\n","properties":{"authPlugin":{"type":"string","description":"Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.\n"},"host":{"type":"string","description":"The source host of the user. Defaults to \"localhost\".\n"},"password":{"type":"string","description":"Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.\n","deprecationMessage":"Please use plaintext_password instead","secret":true},"plaintextPassword":{"type":"string","description":"The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.\n","secret":true},"tlsOption":{"type":"string","description":"An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.\n\n[ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html\n"},"user":{"type":"string","description":"The name of the user.\n","language":{"csharp":{"name":"UserName"}}}},"required":["user"],"inputProperties":{"authPlugin":{"type":"string","description":"Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.\n","willReplaceOnChanges":true},"host":{"type":"string","description":"The source host of the user. Defaults to \"localhost\".\n","willReplaceOnChanges":true},"password":{"type":"string","description":"Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.\n","deprecationMessage":"Please use plaintext_password instead","secret":true},"plaintextPassword":{"type":"string","description":"The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.\n","secret":true},"tlsOption":{"type":"string","description":"An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.\n\n[ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html\n","willReplaceOnChanges":true},"user":{"type":"string","description":"The name of the user.\n","language":{"csharp":{"name":"UserName"}},"willReplaceOnChanges":true}},"requiredInputs":["user"],"stateInputs":{"description":"Input properties used for looking up and filtering User resources.\n","properties":{"authPlugin":{"type":"string","description":"Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.\n","willReplaceOnChanges":true},"host":{"type":"string","description":"The source host of the user. Defaults to \"localhost\".\n","willReplaceOnChanges":true},"password":{"type":"string","description":"Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.\n","deprecationMessage":"Please use plaintext_password instead","secret":true},"plaintextPassword":{"type":"string","description":"The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.\n","secret":true},"tlsOption":{"type":"string","description":"An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.\n\n[ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html\n","willReplaceOnChanges":true},"user":{"type":"string","description":"The name of the user.\n","language":{"csharp":{"name":"UserName"}},"willReplaceOnChanges":true}},"type":"object"}},"mysql:index/userPassword:UserPassword":{"description":"The `mysql.UserPassword` resource sets and manages a password for a given \nuser on a MySQL server.\n\n\u003e **NOTE on MySQL Passwords:** This resource conflicts with the `password` \n   argument for `mysql.User`. This resource uses PGP encryption to avoid \n   storing unencrypted passwords in the provider state.\n   \n\u003e **NOTE on How Passwords are Created:** This resource **automatically**\n   generates a **random** password. The password will be a random UUID.\n","properties":{"encryptedPassword":{"type":"string","description":"The encrypted password, base64 encoded.\n"},"host":{"type":"string","description":"The source host of the user. Defaults to `localhost`.\n"},"keyFingerprint":{"type":"string","description":"The fingerprint of the PGP key used to encrypt the password\n"},"pgpKey":{"type":"string","description":"Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n"},"user":{"type":"string","description":"The IAM user to associate with this access key.\n"}},"required":["encryptedPassword","keyFingerprint","pgpKey","user"],"inputProperties":{"host":{"type":"string","description":"The source host of the user. Defaults to `localhost`.\n","willReplaceOnChanges":true},"pgpKey":{"type":"string","description":"Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n","willReplaceOnChanges":true},"user":{"type":"string","description":"The IAM user to associate with this access key.\n","willReplaceOnChanges":true}},"requiredInputs":["pgpKey","user"],"stateInputs":{"description":"Input properties used for looking up and filtering UserPassword resources.\n","properties":{"encryptedPassword":{"type":"string","description":"The encrypted password, base64 encoded.\n"},"host":{"type":"string","description":"The source host of the user. Defaults to `localhost`.\n","willReplaceOnChanges":true},"keyFingerprint":{"type":"string","description":"The fingerprint of the PGP key used to encrypt the password\n"},"pgpKey":{"type":"string","description":"Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n","willReplaceOnChanges":true},"user":{"type":"string","description":"The IAM user to associate with this access key.\n","willReplaceOnChanges":true}},"type":"object"}}}}