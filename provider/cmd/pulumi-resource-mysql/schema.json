{
    "name": "mysql",
    "description": "A Pulumi package for creating and managing mysql cloud resources.",
    "keywords": [
        "pulumi",
        "mysql"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`mysql` Terraform Provider](https://github.com/terraform-providers/terraform-provider-mysql).",
    "repository": "https://github.com/pulumi/pulumi-mysql",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "authenticationPlugin": {
                "type": "string"
            },
            "endpoint": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "MYSQL_ENDPOINT"
                    ]
                }
            },
            "maxConnLifetimeSec": {
                "type": "integer"
            },
            "maxOpenConns": {
                "type": "integer"
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "MYSQL_PASSWORD"
                    ]
                }
            },
            "proxy": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ALL_PROXY",
                        "all_proxy"
                    ]
                }
            },
            "tls": {
                "type": "string",
                "default": "false",
                "defaultInfo": {
                    "environment": [
                        "MYSQL_TLS_CONFIG"
                    ]
                }
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "MYSQL_USERNAME"
                    ]
                }
            }
        },
        "defaults": [
            "endpoint",
            "username"
        ]
    },
    "provider": {
        "description": "The provider type for the mysql package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "authenticationPlugin": {
                "type": "string"
            },
            "endpoint": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "MYSQL_ENDPOINT"
                    ]
                }
            },
            "maxConnLifetimeSec": {
                "type": "integer"
            },
            "maxOpenConns": {
                "type": "integer"
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "MYSQL_PASSWORD"
                    ]
                }
            },
            "proxy": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ALL_PROXY",
                        "all_proxy"
                    ]
                }
            },
            "tls": {
                "type": "string",
                "default": "false",
                "defaultInfo": {
                    "environment": [
                        "MYSQL_TLS_CONFIG"
                    ]
                }
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "MYSQL_USERNAME"
                    ]
                }
            }
        }
    },
    "resources": {
        "mysql:index/database:Database": {
            "description": "The ``mysql.Database`` resource creates and manages a database on a MySQL\nserver.\n\n\u003e **Caution:** The ``mysql.Database`` resource can completely delete your\ndatabase just as easily as it can create it. To avoid costly accidents,\nconsider setting\n[``prevent_destroy``](https://www.terraform.io/docs/configuration/resources.html#prevent_destroy)\non your database resources as an extra safety measure.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst app = new mysql.Database(\"app\", {});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\napp = mysql.Database(\"app\")\n```\n```csharp\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var app = new MySql.Database(\"app\", new MySql.DatabaseArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v2/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewDatabase(ctx, \"app\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "defaultCharacterSet": {
                    "type": "string",
                    "description": "The default character set to use when\na table is created without specifying an explicit character set. Defaults\nto \"utf8\".\n"
                },
                "defaultCollation": {
                    "type": "string",
                    "description": "The default collation to use when a table\nis created without specifying an explicit collation. Defaults to\n``utf8_general_ci``. Each character set has its own set of collations, so\nchanging the character set requires also changing the collation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database. This must be unique within\na given MySQL server and may or may not be case-sensitive depending on\nthe operating system on which the MySQL server is running.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "defaultCharacterSet": {
                    "type": "string",
                    "description": "The default character set to use when\na table is created without specifying an explicit character set. Defaults\nto \"utf8\".\n"
                },
                "defaultCollation": {
                    "type": "string",
                    "description": "The default collation to use when a table\nis created without specifying an explicit collation. Defaults to\n``utf8_general_ci``. Each character set has its own set of collations, so\nchanging the character set requires also changing the collation.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the database. This must be unique within\na given MySQL server and may or may not be case-sensitive depending on\nthe operating system on which the MySQL server is running.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "defaultCharacterSet": {
                        "type": "string",
                        "description": "The default character set to use when\na table is created without specifying an explicit character set. Defaults\nto \"utf8\".\n"
                    },
                    "defaultCollation": {
                        "type": "string",
                        "description": "The default collation to use when a table\nis created without specifying an explicit collation. Defaults to\n``utf8_general_ci``. Each character set has its own set of collations, so\nchanging the character set requires also changing the collation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the database. This must be unique within\na given MySQL server and may or may not be case-sensitive depending on\nthe operating system on which the MySQL server is running.\n"
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/grant:Grant": {
            "description": "The ``mysql.Grant`` resource creates and manages privileges given to\na user on a MySQL server.\n\n## Granting Privileges to a User\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst jdoeUser = new mysql.User(\"jdoe\", {\n    host: \"example.com\",\n    plaintextPassword: \"password\",\n    user: \"jdoe\",\n});\nconst jdoeGrant = new mysql.Grant(\"jdoe\", {\n    database: \"app\",\n    host: jdoeUser.host,\n    privileges: [\n        \"SELECT\",\n        \"UPDATE\",\n    ],\n    user: jdoeUser.user,\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\njdoe_user = mysql.User(\"jdoeUser\",\n    host=\"example.com\",\n    plaintext_password=\"password\",\n    user=\"jdoe\")\njdoe_grant = mysql.Grant(\"jdoeGrant\",\n    database=\"app\",\n    host=jdoe_user.host,\n    privileges=[\n        \"SELECT\",\n        \"UPDATE\",\n    ],\n    user=jdoe_user.user)\n```\n```csharp\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var jdoeUser = new MySql.User(\"jdoeUser\", new MySql.UserArgs\n        {\n            Host = \"example.com\",\n            PlaintextPassword = \"password\",\n            User = \"jdoe\",\n        });\n        var jdoeGrant = new MySql.Grant(\"jdoeGrant\", new MySql.GrantArgs\n        {\n            Database = \"app\",\n            Host = jdoeUser.Host,\n            Privileges = \n            {\n                \"SELECT\",\n                \"UPDATE\",\n            },\n            User = jdoeUser.UserName,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v2/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjdoeUser, err := mysql.NewUser(ctx, \"jdoeUser\", \u0026mysql.UserArgs{\n\t\t\tHost:              pulumi.String(\"example.com\"),\n\t\t\tPlaintextPassword: pulumi.String(\"password\"),\n\t\t\tUser:              pulumi.String(\"jdoe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = mysql.NewGrant(ctx, \"jdoeGrant\", \u0026mysql.GrantArgs{\n\t\t\tDatabase: pulumi.String(\"app\"),\n\t\t\tHost:     jdoeUser.Host,\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t},\n\t\t\tUser: jdoeUser.User,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Granting Privileges to a Role\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst developerRole = new mysql.Role(\"developer\", {});\nconst developerGrant = new mysql.Grant(\"developer\", {\n    database: \"app\",\n    privileges: [\n        \"SELECT\",\n        \"UPDATE\",\n    ],\n    role: developerRole.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\ndeveloper_role = mysql.Role(\"developerRole\")\ndeveloper_grant = mysql.Grant(\"developerGrant\",\n    database=\"app\",\n    privileges=[\n        \"SELECT\",\n        \"UPDATE\",\n    ],\n    role=developer_role.name)\n```\n```csharp\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var developerRole = new MySql.Role(\"developerRole\", new MySql.RoleArgs\n        {\n        });\n        var developerGrant = new MySql.Grant(\"developerGrant\", new MySql.GrantArgs\n        {\n            Database = \"app\",\n            Privileges = \n            {\n                \"SELECT\",\n                \"UPDATE\",\n            },\n            Role = developerRole.Name,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v2/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdeveloperRole, err := mysql.NewRole(ctx, \"developerRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = mysql.NewGrant(ctx, \"developerGrant\", \u0026mysql.GrantArgs{\n\t\t\tDatabase: pulumi.String(\"app\"),\n\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"SELECT\"),\n\t\t\t\tpulumi.String(\"UPDATE\"),\n\t\t\t},\n\t\t\tRole: developerRole.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n## Adding a Role to a User\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst jdoe = new mysql.User(\"jdoe\", {\n    host: \"example.com\",\n    plaintextPassword: \"password\",\n    user: \"jdoe\",\n});\nconst developerRole = new mysql.Role(\"developer\", {});\nconst developerGrant = new mysql.Grant(\"developer\", {\n    database: \"app\",\n    host: jdoe.host,\n    roles: [developerRole.name],\n    user: jdoe.user,\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\njdoe = mysql.User(\"jdoe\",\n    host=\"example.com\",\n    plaintext_password=\"password\",\n    user=\"jdoe\")\ndeveloper_role = mysql.Role(\"developerRole\")\ndeveloper_grant = mysql.Grant(\"developerGrant\",\n    database=\"app\",\n    host=jdoe.host,\n    roles=[developer_role.name],\n    user=jdoe.user)\n```\n```csharp\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var jdoe = new MySql.User(\"jdoe\", new MySql.UserArgs\n        {\n            Host = \"example.com\",\n            PlaintextPassword = \"password\",\n            User = \"jdoe\",\n        });\n        var developerRole = new MySql.Role(\"developerRole\", new MySql.RoleArgs\n        {\n        });\n        var developerGrant = new MySql.Grant(\"developerGrant\", new MySql.GrantArgs\n        {\n            Database = \"app\",\n            Host = jdoe.Host,\n            Roles = \n            {\n                developerRole.Name,\n            },\n            User = jdoe.UserName,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v2/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjdoe, err := mysql.NewUser(ctx, \"jdoe\", \u0026mysql.UserArgs{\n\t\t\tHost:              pulumi.String(\"example.com\"),\n\t\t\tPlaintextPassword: pulumi.String(\"password\"),\n\t\t\tUser:              pulumi.String(\"jdoe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdeveloperRole, err := mysql.NewRole(ctx, \"developerRole\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = mysql.NewGrant(ctx, \"developerGrant\", \u0026mysql.GrantArgs{\n\t\t\tDatabase: pulumi.String(\"app\"),\n\t\t\tHost:     jdoe.Host,\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tdeveloperRole.Name,\n\t\t\t},\n\t\t\tUser: jdoe.User,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n",
            "properties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant privileges on.\n"
                },
                "grant": {
                    "type": "boolean",
                    "description": "Whether to also give the user privileges to grant the same privileges to other users.\n",
                    "language": {
                        "csharp": {
                            "name": "GrantName"
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to \"localhost\". Conflicts with `role`.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to grant `privileges` to. Conflicts with `user` and `host`.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of rols to grant to the user. Conflicts with `privileges`.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Which table to grant `privileges` on. Defaults to `*`, which is all tables.\n"
                },
                "tlsOption": {
                    "type": "string",
                    "description": "An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user. Conflicts with `role`.\n"
                }
            },
            "required": [
                "database"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "The database to grant privileges on.\n"
                },
                "grant": {
                    "type": "boolean",
                    "description": "Whether to also give the user privileges to grant the same privileges to other users.\n",
                    "language": {
                        "csharp": {
                            "name": "GrantName"
                        }
                    }
                },
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to \"localhost\". Conflicts with `role`.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role to grant `privileges` to. Conflicts with `user` and `host`.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of rols to grant to the user. Conflicts with `privileges`.\n"
                },
                "table": {
                    "type": "string",
                    "description": "Which table to grant `privileges` on. Defaults to `*`, which is all tables.\n"
                },
                "tlsOption": {
                    "type": "string",
                    "description": "An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user. Conflicts with `role`.\n"
                }
            },
            "requiredInputs": [
                "database"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Grant resources.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "The database to grant privileges on.\n"
                    },
                    "grant": {
                        "type": "boolean",
                        "description": "Whether to also give the user privileges to grant the same privileges to other users.\n",
                        "language": {
                            "csharp": {
                                "name": "GrantName"
                            }
                        }
                    },
                    "host": {
                        "type": "string",
                        "description": "The source host of the user. Defaults to \"localhost\". Conflicts with `role`.\n"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role to grant `privileges` to. Conflicts with `user` and `host`.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of rols to grant to the user. Conflicts with `privileges`.\n"
                    },
                    "table": {
                        "type": "string",
                        "description": "Which table to grant `privileges` on. Defaults to `*`, which is all tables.\n"
                    },
                    "tlsOption": {
                        "type": "string",
                        "description": "An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The name of the user. Conflicts with `role`.\n"
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/role:Role": {
            "description": "The ``mysql.Role`` resource creates and manages a user on a MySQL\nserver.\n\n\u003e **Note:** MySQL introduced roles in version 8. They do not work on MySQL 5 and lower.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst developer = new mysql.Role(\"developer\", {});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\ndeveloper = mysql.Role(\"developer\")\n```\n```csharp\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var developer = new MySql.Role(\"developer\", new MySql.RoleArgs\n        {\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v2/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewRole(ctx, \"developer\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the role.\n"
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/user:User": {
            "description": "The ``mysql.User`` resource creates and manages a user on a MySQL\nserver.\n\n\u003e **Note:** The password for the user is provided in plain text, and is\nobscured by an unsalted hash in the state\n[Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).\nCare is required when using this resource, to avoid disclosing the password.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst jdoe = new mysql.User(\"jdoe\", {\n    host: \"example.com\",\n    plaintextPassword: \"password\",\n    user: \"jdoe\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\njdoe = mysql.User(\"jdoe\",\n    host=\"example.com\",\n    plaintext_password=\"password\",\n    user=\"jdoe\")\n```\n```csharp\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var jdoe = new MySql.User(\"jdoe\", new MySql.UserArgs\n        {\n            Host = \"example.com\",\n            PlaintextPassword = \"password\",\n            User = \"jdoe\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v2/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewUser(ctx, \"jdoe\", \u0026mysql.UserArgs{\n\t\t\tHost:              pulumi.String(\"example.com\"),\n\t\t\tPlaintextPassword: pulumi.String(\"password\"),\n\t\t\tUser:              pulumi.String(\"jdoe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### With An Authentication Plugin\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mysql from \"@pulumi/mysql\";\n\nconst nologin = new mysql.User(\"nologin\", {\n    authPlugin: \"mysql_no_login\",\n    host: \"example.com\",\n    user: \"nologin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mysql as mysql\n\nnologin = mysql.User(\"nologin\",\n    auth_plugin=\"mysql_no_login\",\n    host=\"example.com\",\n    user=\"nologin\")\n```\n```csharp\nusing Pulumi;\nusing MySql = Pulumi.MySql;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var nologin = new MySql.User(\"nologin\", new MySql.UserArgs\n        {\n            AuthPlugin = \"mysql_no_login\",\n            Host = \"example.com\",\n            User = \"nologin\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-mysql/sdk/v2/go/mysql\"\n\t\"github.com/pulumi/pulumi/sdk/v2/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := mysql.NewUser(ctx, \"nologin\", \u0026mysql.UserArgs{\n\t\t\tAuthPlugin: pulumi.String(\"mysql_no_login\"),\n\t\t\tHost:       pulumi.String(\"example.com\"),\n\t\t\tUser:       pulumi.String(\"nologin\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "authPlugin": {
                    "type": "string",
                    "description": "Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to \"localhost\".\n"
                },
                "password": {
                    "type": "string",
                    "description": "Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.\n",
                    "deprecationMessage": "Please use plaintext_password instead"
                },
                "plaintextPassword": {
                    "type": "string",
                    "description": "The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.\n"
                },
                "tlsOption": {
                    "type": "string",
                    "description": "An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "language": {
                        "csharp": {
                            "name": "UserName"
                        }
                    }
                }
            },
            "required": [
                "user"
            ],
            "inputProperties": {
                "authPlugin": {
                    "type": "string",
                    "description": "Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to \"localhost\".\n"
                },
                "password": {
                    "type": "string",
                    "description": "Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.\n",
                    "deprecationMessage": "Please use plaintext_password instead"
                },
                "plaintextPassword": {
                    "type": "string",
                    "description": "The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.\n"
                },
                "tlsOption": {
                    "type": "string",
                    "description": "An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "language": {
                        "csharp": {
                            "name": "UserName"
                        }
                    }
                }
            },
            "requiredInputs": [
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "authPlugin": {
                        "type": "string",
                        "description": "Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintext_password`.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "The source host of the user. Defaults to \"localhost\".\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Deprecated alias of `plaintext_password`, whose value is *stored as plaintext in state*. Prefer to use `plaintext_password` instead, which stores the password as an unsalted hash. Conflicts with `auth_plugin`.\n",
                        "deprecationMessage": "Please use plaintext_password instead"
                    },
                    "plaintextPassword": {
                        "type": "string",
                        "description": "The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `auth_plugin`.\n"
                    },
                    "tlsOption": {
                        "type": "string",
                        "description": "An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The name of the user.\n",
                        "language": {
                            "csharp": {
                                "name": "UserName"
                            }
                        }
                    }
                },
                "type": "object"
            }
        },
        "mysql:index/userPassword:UserPassword": {
            "properties": {
                "encryptedPassword": {
                    "type": "string",
                    "description": "The encrypted password, base64 encoded.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to `localhost`.\n"
                },
                "keyFingerprint": {
                    "type": "string",
                    "description": "The fingerprint of the PGP key used to encrypt the password\n"
                },
                "pgpKey": {
                    "type": "string",
                    "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The IAM user to associate with this access key.\n"
                }
            },
            "required": [
                "encryptedPassword",
                "keyFingerprint",
                "pgpKey",
                "user"
            ],
            "inputProperties": {
                "host": {
                    "type": "string",
                    "description": "The source host of the user. Defaults to `localhost`.\n"
                },
                "pgpKey": {
                    "type": "string",
                    "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The IAM user to associate with this access key.\n"
                }
            },
            "requiredInputs": [
                "pgpKey",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserPassword resources.\n",
                "properties": {
                    "encryptedPassword": {
                        "type": "string",
                        "description": "The encrypted password, base64 encoded.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "The source host of the user. Defaults to `localhost`.\n"
                    },
                    "keyFingerprint": {
                        "type": "string",
                        "description": "The fingerprint of the PGP key used to encrypt the password\n"
                    },
                    "pgpKey": {
                        "type": "string",
                        "description": "Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The IAM user to associate with this access key.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "mysql": "MySql"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing mysql cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-mysql)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-mysql` repo](https://github.com/pulumi/pulumi-mysql/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-mysql` repo](https://github.com/terraform-providers/terraform-provider-mysql/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-mysql)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-mysql` repo](https://github.com/pulumi/pulumi-mysql/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-mysql` repo](https://github.com/terraform-providers/terraform-provider-mysql/issues).",
            "requires": {
                "pulumi": "\u003e=2.0.0,\u003c3.0.0"
            }
        }
    }
}