// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The ``mysql_role`` resource creates and manages a user on a MySQL
// server.
// 
// > **Note:** MySQL introduced roles in version 8. They do not work on MySQL 5 and lower.
type Role struct {
	s *pulumi.ResourceState
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOpt) (*Role, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
	} else {
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("mysql:index/role:Role", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Role{s: s}, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RoleState, opts ...pulumi.ResourceOpt) (*Role, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("mysql:index/role:Role", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Role{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Role) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Role) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The name of the role.
func (r *Role) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering Role resources.
type RoleState struct {
	// The name of the role.
	Name interface{}
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// The name of the role.
	Name interface{}
}
