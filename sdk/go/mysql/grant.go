// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The ``mysql_grant`` resource creates and manages privileges given to
// a user on a MySQL server.
type Grant struct {
	s *pulumi.ResourceState
}

// NewGrant registers a new resource with the given unique name, arguments, and options.
func NewGrant(ctx *pulumi.Context,
	name string, args *GrantArgs, opts ...pulumi.ResourceOpt) (*Grant, error) {
	if args == nil || args.Database == nil {
		return nil, errors.New("missing required argument 'Database'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["database"] = nil
		inputs["grant"] = nil
		inputs["host"] = nil
		inputs["privileges"] = nil
		inputs["role"] = nil
		inputs["roles"] = nil
		inputs["table"] = nil
		inputs["tlsOption"] = nil
		inputs["user"] = nil
	} else {
		inputs["database"] = args.Database
		inputs["grant"] = args.Grant
		inputs["host"] = args.Host
		inputs["privileges"] = args.Privileges
		inputs["role"] = args.Role
		inputs["roles"] = args.Roles
		inputs["table"] = args.Table
		inputs["tlsOption"] = args.TlsOption
		inputs["user"] = args.User
	}
	s, err := ctx.RegisterResource("mysql:index/grant:Grant", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Grant{s: s}, nil
}

// GetGrant gets an existing Grant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrant(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GrantState, opts ...pulumi.ResourceOpt) (*Grant, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["database"] = state.Database
		inputs["grant"] = state.Grant
		inputs["host"] = state.Host
		inputs["privileges"] = state.Privileges
		inputs["role"] = state.Role
		inputs["roles"] = state.Roles
		inputs["table"] = state.Table
		inputs["tlsOption"] = state.TlsOption
		inputs["user"] = state.User
	}
	s, err := ctx.ReadResource("mysql:index/grant:Grant", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Grant{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Grant) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Grant) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The database to grant privileges on.
func (r *Grant) Database() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["database"])
}

// Whether to also give the user privileges to grant the same privileges to other users.
func (r *Grant) Grant() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["grant"])
}

// The source host of the user. Defaults to "localhost". Conflicts with `role`.
func (r *Grant) Host() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["host"])
}

// A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
func (r *Grant) Privileges() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["privileges"])
}

// The role to grant `privileges` to. Conflicts with `user` and `host`.
func (r *Grant) Role() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["role"])
}

// A list of rols to grant to the user. Conflicts with `privileges`.
func (r *Grant) Roles() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["roles"])
}

// Which table to grant `privileges` on. Defaults to `*`, which is all tables.
func (r *Grant) Table() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["table"])
}

// An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
func (r *Grant) TlsOption() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["tlsOption"])
}

// The name of the user. Conflicts with `role`.
func (r *Grant) User() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["user"])
}

// Input properties used for looking up and filtering Grant resources.
type GrantState struct {
	// The database to grant privileges on.
	Database interface{}
	// Whether to also give the user privileges to grant the same privileges to other users.
	Grant interface{}
	// The source host of the user. Defaults to "localhost". Conflicts with `role`.
	Host interface{}
	// A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
	Privileges interface{}
	// The role to grant `privileges` to. Conflicts with `user` and `host`.
	Role interface{}
	// A list of rols to grant to the user. Conflicts with `privileges`.
	Roles interface{}
	// Which table to grant `privileges` on. Defaults to `*`, which is all tables.
	Table interface{}
	// An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
	TlsOption interface{}
	// The name of the user. Conflicts with `role`.
	User interface{}
}

// The set of arguments for constructing a Grant resource.
type GrantArgs struct {
	// The database to grant privileges on.
	Database interface{}
	// Whether to also give the user privileges to grant the same privileges to other users.
	Grant interface{}
	// The source host of the user. Defaults to "localhost". Conflicts with `role`.
	Host interface{}
	// A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
	Privileges interface{}
	// The role to grant `privileges` to. Conflicts with `user` and `host`.
	Role interface{}
	// A list of rols to grant to the user. Conflicts with `privileges`.
	Roles interface{}
	// Which table to grant `privileges` on. Defaults to `*`, which is all tables.
	Table interface{}
	// An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
	TlsOption interface{}
	// The name of the user. Conflicts with `role`.
	User interface{}
}
