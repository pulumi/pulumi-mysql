// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The ``Grant`` resource creates and manages privileges given to
// a user on a MySQL server.
//
// ## Granting Privileges to a User
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mysql/sdk/v2/go/mysql"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		jdoeUser, err := mysql.NewUser(ctx, "jdoeUser", &mysql.UserArgs{
// 			Host:              pulumi.String("example.com"),
// 			PlaintextPassword: pulumi.String("password"),
// 			User:              pulumi.String("jdoe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mysql.NewGrant(ctx, "jdoeGrant", &mysql.GrantArgs{
// 			Database: pulumi.String("app"),
// 			Host:     jdoeUser.Host,
// 			Privileges: pulumi.StringArray{
// 				pulumi.String("SELECT"),
// 				pulumi.String("UPDATE"),
// 			},
// 			User: jdoeUser.User,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Granting Privileges to a Role
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mysql/sdk/v2/go/mysql"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		developerRole, err := mysql.NewRole(ctx, "developerRole", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mysql.NewGrant(ctx, "developerGrant", &mysql.GrantArgs{
// 			Database: pulumi.String("app"),
// 			Privileges: pulumi.StringArray{
// 				pulumi.String("SELECT"),
// 				pulumi.String("UPDATE"),
// 			},
// 			Role: developerRole.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Adding a Role to a User
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mysql/sdk/v2/go/mysql"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		jdoe, err := mysql.NewUser(ctx, "jdoe", &mysql.UserArgs{
// 			Host:              pulumi.String("example.com"),
// 			PlaintextPassword: pulumi.String("password"),
// 			User:              pulumi.String("jdoe"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		developerRole, err := mysql.NewRole(ctx, "developerRole", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mysql.NewGrant(ctx, "developerGrant", &mysql.GrantArgs{
// 			Database: pulumi.String("app"),
// 			Host:     jdoe.Host,
// 			Roles: pulumi.StringArray{
// 				developerRole.Name,
// 			},
// 			User: jdoe.User,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Grant struct {
	pulumi.CustomResourceState

	// The database to grant privileges on.
	Database pulumi.StringOutput `pulumi:"database"`
	// Whether to also give the user privileges to grant the same privileges to other users.
	Grant pulumi.BoolPtrOutput `pulumi:"grant"`
	// The source host of the user. Defaults to "localhost". Conflicts with `role`.
	Host pulumi.StringPtrOutput `pulumi:"host"`
	// A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
	Privileges pulumi.StringArrayOutput `pulumi:"privileges"`
	// The role to grant `privileges` to. Conflicts with `user` and `host`.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// A list of rols to grant to the user. Conflicts with `privileges`.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// Which table to grant `privileges` on. Defaults to `*`, which is all tables.
	Table pulumi.StringPtrOutput `pulumi:"table"`
	// An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
	TlsOption pulumi.StringPtrOutput `pulumi:"tlsOption"`
	// The name of the user. Conflicts with `role`.
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewGrant registers a new resource with the given unique name, arguments, and options.
func NewGrant(ctx *pulumi.Context,
	name string, args *GrantArgs, opts ...pulumi.ResourceOption) (*Grant, error) {
	if args == nil || args.Database == nil {
		return nil, errors.New("missing required argument 'Database'")
	}
	if args == nil {
		args = &GrantArgs{}
	}
	var resource Grant
	err := ctx.RegisterResource("mysql:index/grant:Grant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrant gets an existing Grant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrantState, opts ...pulumi.ResourceOption) (*Grant, error) {
	var resource Grant
	err := ctx.ReadResource("mysql:index/grant:Grant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Grant resources.
type grantState struct {
	// The database to grant privileges on.
	Database *string `pulumi:"database"`
	// Whether to also give the user privileges to grant the same privileges to other users.
	Grant *bool `pulumi:"grant"`
	// The source host of the user. Defaults to "localhost". Conflicts with `role`.
	Host *string `pulumi:"host"`
	// A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
	Privileges []string `pulumi:"privileges"`
	// The role to grant `privileges` to. Conflicts with `user` and `host`.
	Role *string `pulumi:"role"`
	// A list of rols to grant to the user. Conflicts with `privileges`.
	Roles []string `pulumi:"roles"`
	// Which table to grant `privileges` on. Defaults to `*`, which is all tables.
	Table *string `pulumi:"table"`
	// An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
	TlsOption *string `pulumi:"tlsOption"`
	// The name of the user. Conflicts with `role`.
	User *string `pulumi:"user"`
}

type GrantState struct {
	// The database to grant privileges on.
	Database pulumi.StringPtrInput
	// Whether to also give the user privileges to grant the same privileges to other users.
	Grant pulumi.BoolPtrInput
	// The source host of the user. Defaults to "localhost". Conflicts with `role`.
	Host pulumi.StringPtrInput
	// A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
	Privileges pulumi.StringArrayInput
	// The role to grant `privileges` to. Conflicts with `user` and `host`.
	Role pulumi.StringPtrInput
	// A list of rols to grant to the user. Conflicts with `privileges`.
	Roles pulumi.StringArrayInput
	// Which table to grant `privileges` on. Defaults to `*`, which is all tables.
	Table pulumi.StringPtrInput
	// An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
	TlsOption pulumi.StringPtrInput
	// The name of the user. Conflicts with `role`.
	User pulumi.StringPtrInput
}

func (GrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*grantState)(nil)).Elem()
}

type grantArgs struct {
	// The database to grant privileges on.
	Database string `pulumi:"database"`
	// Whether to also give the user privileges to grant the same privileges to other users.
	Grant *bool `pulumi:"grant"`
	// The source host of the user. Defaults to "localhost". Conflicts with `role`.
	Host *string `pulumi:"host"`
	// A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
	Privileges []string `pulumi:"privileges"`
	// The role to grant `privileges` to. Conflicts with `user` and `host`.
	Role *string `pulumi:"role"`
	// A list of rols to grant to the user. Conflicts with `privileges`.
	Roles []string `pulumi:"roles"`
	// Which table to grant `privileges` on. Defaults to `*`, which is all tables.
	Table *string `pulumi:"table"`
	// An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
	TlsOption *string `pulumi:"tlsOption"`
	// The name of the user. Conflicts with `role`.
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a Grant resource.
type GrantArgs struct {
	// The database to grant privileges on.
	Database pulumi.StringInput
	// Whether to also give the user privileges to grant the same privileges to other users.
	Grant pulumi.BoolPtrInput
	// The source host of the user. Defaults to "localhost". Conflicts with `role`.
	Host pulumi.StringPtrInput
	// A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
	Privileges pulumi.StringArrayInput
	// The role to grant `privileges` to. Conflicts with `user` and `host`.
	Role pulumi.StringPtrInput
	// A list of rols to grant to the user. Conflicts with `privileges`.
	Roles pulumi.StringArrayInput
	// Which table to grant `privileges` on. Defaults to `*`, which is all tables.
	Table pulumi.StringPtrInput
	// An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of 'SSL' will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
	TlsOption pulumi.StringPtrInput
	// The name of the user. Conflicts with `role`.
	User pulumi.StringPtrInput
}

func (GrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grantArgs)(nil)).Elem()
}
