// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "mysql:index/database:Database":
		r = &Database{}
	case "mysql:index/grant:Grant":
		r = &Grant{}
	case "mysql:index/role:Role":
		r = &Role{}
	case "mysql:index/user:User":
		r = &User{}
	case "mysql:index/userPassword:UserPassword":
		r = &UserPassword{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:mysql" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"mysql",
		"index/database",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"mysql",
		"index/grant",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"mysql",
		"index/role",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"mysql",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"mysql",
		"index/userPassword",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"mysql",
		&pkg{version},
	)
}
