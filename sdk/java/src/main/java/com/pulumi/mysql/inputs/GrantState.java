// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GrantState extends com.pulumi.resources.ResourceArgs {

    public static final GrantState Empty = new GrantState();

    /**
     * The database to grant privileges on.
     * 
     */
    @Import(name="database")
    private @Nullable Output<String> database;

    /**
     * @return The database to grant privileges on.
     * 
     */
    public Optional<Output<String>> database() {
        return Optional.ofNullable(this.database);
    }

    /**
     * Whether to also give the user privileges to grant the same privileges to other users.
     * 
     */
    @Import(name="grant")
    private @Nullable Output<Boolean> grant;

    /**
     * @return Whether to also give the user privileges to grant the same privileges to other users.
     * 
     */
    public Optional<Output<Boolean>> grant() {
        return Optional.ofNullable(this.grant);
    }

    /**
     * The source host of the user. Defaults to &#34;localhost&#34;. Conflicts with `role`.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The source host of the user. Defaults to &#34;localhost&#34;. Conflicts with `role`.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
     * 
     */
    @Import(name="privileges")
    private @Nullable Output<List<String>> privileges;

    /**
     * @return A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
     * 
     */
    public Optional<Output<List<String>>> privileges() {
        return Optional.ofNullable(this.privileges);
    }

    /**
     * The role to grant `privileges` to. Conflicts with `user` and `host`.
     * 
     */
    @Import(name="role")
    private @Nullable Output<String> role;

    /**
     * @return The role to grant `privileges` to. Conflicts with `user` and `host`.
     * 
     */
    public Optional<Output<String>> role() {
        return Optional.ofNullable(this.role);
    }

    /**
     * A list of rols to grant to the user. Conflicts with `privileges`.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return A list of rols to grant to the user. Conflicts with `privileges`.
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * Which table to grant `privileges` on. Defaults to `*`, which is all tables.
     * 
     */
    @Import(name="table")
    private @Nullable Output<String> table;

    /**
     * @return Which table to grant `privileges` on. Defaults to `*`, which is all tables.
     * 
     */
    public Optional<Output<String>> table() {
        return Optional.ofNullable(this.table);
    }

    /**
     * An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of &#39;SSL&#39; will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
     * 
     */
    @Import(name="tlsOption")
    private @Nullable Output<String> tlsOption;

    /**
     * @return An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of &#39;SSL&#39; will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
     * 
     */
    public Optional<Output<String>> tlsOption() {
        return Optional.ofNullable(this.tlsOption);
    }

    /**
     * The name of the user. Conflicts with `role`.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The name of the user. Conflicts with `role`.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private GrantState() {}

    private GrantState(GrantState $) {
        this.database = $.database;
        this.grant = $.grant;
        this.host = $.host;
        this.privileges = $.privileges;
        this.role = $.role;
        this.roles = $.roles;
        this.table = $.table;
        this.tlsOption = $.tlsOption;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GrantState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GrantState $;

        public Builder() {
            $ = new GrantState();
        }

        public Builder(GrantState defaults) {
            $ = new GrantState(Objects.requireNonNull(defaults));
        }

        /**
         * @param database The database to grant privileges on.
         * 
         * @return builder
         * 
         */
        public Builder database(@Nullable Output<String> database) {
            $.database = database;
            return this;
        }

        /**
         * @param database The database to grant privileges on.
         * 
         * @return builder
         * 
         */
        public Builder database(String database) {
            return database(Output.of(database));
        }

        /**
         * @param grant Whether to also give the user privileges to grant the same privileges to other users.
         * 
         * @return builder
         * 
         */
        public Builder grant(@Nullable Output<Boolean> grant) {
            $.grant = grant;
            return this;
        }

        /**
         * @param grant Whether to also give the user privileges to grant the same privileges to other users.
         * 
         * @return builder
         * 
         */
        public Builder grant(Boolean grant) {
            return grant(Output.of(grant));
        }

        /**
         * @param host The source host of the user. Defaults to &#34;localhost&#34;. Conflicts with `role`.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The source host of the user. Defaults to &#34;localhost&#34;. Conflicts with `role`.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param privileges A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
         * 
         * @return builder
         * 
         */
        public Builder privileges(@Nullable Output<List<String>> privileges) {
            $.privileges = privileges;
            return this;
        }

        /**
         * @param privileges A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
         * 
         * @return builder
         * 
         */
        public Builder privileges(List<String> privileges) {
            return privileges(Output.of(privileges));
        }

        /**
         * @param privileges A list of privileges to grant to the user. Refer to a list of privileges (such as [here](https://dev.mysql.com/doc/refman/5.5/en/grant.html)) for applicable privileges. Conflicts with `roles`.
         * 
         * @return builder
         * 
         */
        public Builder privileges(String... privileges) {
            return privileges(List.of(privileges));
        }

        /**
         * @param role The role to grant `privileges` to. Conflicts with `user` and `host`.
         * 
         * @return builder
         * 
         */
        public Builder role(@Nullable Output<String> role) {
            $.role = role;
            return this;
        }

        /**
         * @param role The role to grant `privileges` to. Conflicts with `user` and `host`.
         * 
         * @return builder
         * 
         */
        public Builder role(String role) {
            return role(Output.of(role));
        }

        /**
         * @param roles A list of rols to grant to the user. Conflicts with `privileges`.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles A list of rols to grant to the user. Conflicts with `privileges`.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles A list of rols to grant to the user. Conflicts with `privileges`.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param table Which table to grant `privileges` on. Defaults to `*`, which is all tables.
         * 
         * @return builder
         * 
         */
        public Builder table(@Nullable Output<String> table) {
            $.table = table;
            return this;
        }

        /**
         * @param table Which table to grant `privileges` on. Defaults to `*`, which is all tables.
         * 
         * @return builder
         * 
         */
        public Builder table(String table) {
            return table(Output.of(table));
        }

        /**
         * @param tlsOption An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of &#39;SSL&#39; will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
         * 
         * @return builder
         * 
         */
        public Builder tlsOption(@Nullable Output<String> tlsOption) {
            $.tlsOption = tlsOption;
            return this;
        }

        /**
         * @param tlsOption An TLS-Option for the `GRANT` statement. The value is suffixed to `REQUIRE`. A value of &#39;SSL&#39; will generate a `GRANT ... REQUIRE SSL` statement. See the [MYSQL `GRANT` documentation](https://dev.mysql.com/doc/refman/5.7/en/grant.html) for more. Ignored if MySQL version is under 5.7.0.
         * 
         * @return builder
         * 
         */
        public Builder tlsOption(String tlsOption) {
            return tlsOption(Output.of(tlsOption));
        }

        /**
         * @param user The name of the user. Conflicts with `role`.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The name of the user. Conflicts with `role`.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public GrantState build() {
            return $;
        }
    }

}
