// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintextPassword`.
     * 
     */
    @Import(name="authPlugin")
    private @Nullable Output<String> authPlugin;

    /**
     * @return Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintextPassword`.
     * 
     */
    public Optional<Output<String>> authPlugin() {
        return Optional.ofNullable(this.authPlugin);
    }

    /**
     * The source host of the user. Defaults to &#34;localhost&#34;.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The source host of the user. Defaults to &#34;localhost&#34;.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Deprecated alias of `plaintextPassword`, whose value is *stored as plaintext in state*. Prefer to use `plaintextPassword` instead, which stores the password as an unsalted hash. Conflicts with `authPlugin`.
     * 
     * @deprecated
     * Please use plaintextPassword instead
     * 
     */
    @Deprecated /* Please use plaintextPassword instead */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Deprecated alias of `plaintextPassword`, whose value is *stored as plaintext in state*. Prefer to use `plaintextPassword` instead, which stores the password as an unsalted hash. Conflicts with `authPlugin`.
     * 
     * @deprecated
     * Please use plaintextPassword instead
     * 
     */
    @Deprecated /* Please use plaintextPassword instead */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `authPlugin`.
     * 
     */
    @Import(name="plaintextPassword")
    private @Nullable Output<String> plaintextPassword;

    /**
     * @return The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `authPlugin`.
     * 
     */
    public Optional<Output<String>> plaintextPassword() {
        return Optional.ofNullable(this.plaintextPassword);
    }

    /**
     * An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of &#39;SSL&#39; will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
     * 
     * [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
     * 
     */
    @Import(name="tlsOption")
    private @Nullable Output<String> tlsOption;

    /**
     * @return An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of &#39;SSL&#39; will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
     * 
     * [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
     * 
     */
    public Optional<Output<String>> tlsOption() {
        return Optional.ofNullable(this.tlsOption);
    }

    /**
     * The name of the user.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The name of the user.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.authPlugin = $.authPlugin;
        this.host = $.host;
        this.password = $.password;
        this.plaintextPassword = $.plaintextPassword;
        this.tlsOption = $.tlsOption;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authPlugin Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintextPassword`.
         * 
         * @return builder
         * 
         */
        public Builder authPlugin(@Nullable Output<String> authPlugin) {
            $.authPlugin = authPlugin;
            return this;
        }

        /**
         * @param authPlugin Use an [authentication plugin][ref-auth-plugins] to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with `password` and `plaintextPassword`.
         * 
         * @return builder
         * 
         */
        public Builder authPlugin(String authPlugin) {
            return authPlugin(Output.of(authPlugin));
        }

        /**
         * @param host The source host of the user. Defaults to &#34;localhost&#34;.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The source host of the user. Defaults to &#34;localhost&#34;.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password Deprecated alias of `plaintextPassword`, whose value is *stored as plaintext in state*. Prefer to use `plaintextPassword` instead, which stores the password as an unsalted hash. Conflicts with `authPlugin`.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use plaintextPassword instead
         * 
         */
        @Deprecated /* Please use plaintextPassword instead */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Deprecated alias of `plaintextPassword`, whose value is *stored as plaintext in state*. Prefer to use `plaintextPassword` instead, which stores the password as an unsalted hash. Conflicts with `authPlugin`.
         * 
         * @return builder
         * 
         * @deprecated
         * Please use plaintextPassword instead
         * 
         */
        @Deprecated /* Please use plaintextPassword instead */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param plaintextPassword The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `authPlugin`.
         * 
         * @return builder
         * 
         */
        public Builder plaintextPassword(@Nullable Output<String> plaintextPassword) {
            $.plaintextPassword = plaintextPassword;
            return this;
        }

        /**
         * @param plaintextPassword The password for the user. This must be provided in plain text, so the data source for it must be secured. An _unsalted_ hash of the provided password is stored in state. Conflicts with `authPlugin`.
         * 
         * @return builder
         * 
         */
        public Builder plaintextPassword(String plaintextPassword) {
            return plaintextPassword(Output.of(plaintextPassword));
        }

        /**
         * @param tlsOption An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of &#39;SSL&#39; will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
         * 
         * [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
         * 
         * @return builder
         * 
         */
        public Builder tlsOption(@Nullable Output<String> tlsOption) {
            $.tlsOption = tlsOption;
            return this;
        }

        /**
         * @param tlsOption An TLS-Option for the `CREATE USER` or `ALTER USER` statement. The value is suffixed to `REQUIRE`. A value of &#39;SSL&#39; will generate a `CREATE USER ... REQUIRE SSL` statement. See the [MYSQL `CREATE USER` documentation](https://dev.mysql.com/doc/refman/5.7/en/create-user.html) for more. Ignored if MySQL version is under 5.7.0.
         * 
         * [ref-auth-plugins]: https://dev.mysql.com/doc/refman/5.7/en/authentication-plugins.html
         * 
         * @return builder
         * 
         */
        public Builder tlsOption(String tlsOption) {
            return tlsOption(Output.of(tlsOption));
        }

        /**
         * @param user The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The name of the user.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public UserState build() {
            return $;
        }
    }

}
