// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserPasswordState extends com.pulumi.resources.ResourceArgs {

    public static final UserPasswordState Empty = new UserPasswordState();

    /**
     * The encrypted password, base64 encoded.
     * 
     */
    @Import(name="encryptedPassword")
    private @Nullable Output<String> encryptedPassword;

    /**
     * @return The encrypted password, base64 encoded.
     * 
     */
    public Optional<Output<String>> encryptedPassword() {
        return Optional.ofNullable(this.encryptedPassword);
    }

    /**
     * The source host of the user. Defaults to `localhost`.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The source host of the user. Defaults to `localhost`.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The fingerprint of the PGP key used to encrypt the password
     * 
     */
    @Import(name="keyFingerprint")
    private @Nullable Output<String> keyFingerprint;

    /**
     * @return The fingerprint of the PGP key used to encrypt the password
     * 
     */
    public Optional<Output<String>> keyFingerprint() {
        return Optional.ofNullable(this.keyFingerprint);
    }

    /**
     * Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.
     * 
     */
    @Import(name="pgpKey")
    private @Nullable Output<String> pgpKey;

    /**
     * @return Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.
     * 
     */
    public Optional<Output<String>> pgpKey() {
        return Optional.ofNullable(this.pgpKey);
    }

    /**
     * The IAM user to associate with this access key.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The IAM user to associate with this access key.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private UserPasswordState() {}

    private UserPasswordState(UserPasswordState $) {
        this.encryptedPassword = $.encryptedPassword;
        this.host = $.host;
        this.keyFingerprint = $.keyFingerprint;
        this.pgpKey = $.pgpKey;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserPasswordState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserPasswordState $;

        public Builder() {
            $ = new UserPasswordState();
        }

        public Builder(UserPasswordState defaults) {
            $ = new UserPasswordState(Objects.requireNonNull(defaults));
        }

        /**
         * @param encryptedPassword The encrypted password, base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder encryptedPassword(@Nullable Output<String> encryptedPassword) {
            $.encryptedPassword = encryptedPassword;
            return this;
        }

        /**
         * @param encryptedPassword The encrypted password, base64 encoded.
         * 
         * @return builder
         * 
         */
        public Builder encryptedPassword(String encryptedPassword) {
            return encryptedPassword(Output.of(encryptedPassword));
        }

        /**
         * @param host The source host of the user. Defaults to `localhost`.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The source host of the user. Defaults to `localhost`.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param keyFingerprint The fingerprint of the PGP key used to encrypt the password
         * 
         * @return builder
         * 
         */
        public Builder keyFingerprint(@Nullable Output<String> keyFingerprint) {
            $.keyFingerprint = keyFingerprint;
            return this;
        }

        /**
         * @param keyFingerprint The fingerprint of the PGP key used to encrypt the password
         * 
         * @return builder
         * 
         */
        public Builder keyFingerprint(String keyFingerprint) {
            return keyFingerprint(Output.of(keyFingerprint));
        }

        /**
         * @param pgpKey Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.
         * 
         * @return builder
         * 
         */
        public Builder pgpKey(@Nullable Output<String> pgpKey) {
            $.pgpKey = pgpKey;
            return this;
        }

        /**
         * @param pgpKey Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.
         * 
         * @return builder
         * 
         */
        public Builder pgpKey(String pgpKey) {
            return pgpKey(Output.of(pgpKey));
        }

        /**
         * @param user The IAM user to associate with this access key.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The IAM user to associate with this access key.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public UserPasswordState build() {
            return $;
        }
    }

}
