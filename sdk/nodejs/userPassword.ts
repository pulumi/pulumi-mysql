// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `mysql_user_password` resource sets and manages a passwordd for a given 
 * user on a MySQL server.
 * 
 * > **NOTE on MySQL Passwords:** This resource conflicts with the `password` 
 *    argument for `mysql_user`. This resource uses PGP encryption to avoid 
 *    storing unencrypted passwords in Terraform state.
 *    
 * > **NOTE on How Passwords are Created:** This resource **automatically**
 *    generates a **random** password. The password will be a random UUID.
 */
export class UserPassword extends pulumi.CustomResource {
    /**
     * Get an existing UserPassword resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserPasswordState, opts?: pulumi.CustomResourceOptions): UserPassword {
        return new UserPassword(name, <any>state, { ...opts, id: id });
    }

    /**
     * The encrypted password, base64 encoded.
     */
    public /*out*/ readonly encryptedPassword: pulumi.Output<string>;
    /**
     * The source host of the user. Defaults to `localhost`.
     */
    public readonly host: pulumi.Output<string | undefined>;
    /**
     * The fingerprint of the PGP key used to encrypt the password 
     */
    public /*out*/ readonly keyFingerprint: pulumi.Output<string>;
    /**
     * Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.
     */
    public readonly pgpKey: pulumi.Output<string>;
    /**
     * The IAM user to associate with this access key.
     */
    public readonly user: pulumi.Output<string>;

    /**
     * Create a UserPassword resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserPasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserPasswordArgs | UserPasswordState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: UserPasswordState = argsOrState as UserPasswordState | undefined;
            inputs["encryptedPassword"] = state ? state.encryptedPassword : undefined;
            inputs["host"] = state ? state.host : undefined;
            inputs["keyFingerprint"] = state ? state.keyFingerprint : undefined;
            inputs["pgpKey"] = state ? state.pgpKey : undefined;
            inputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as UserPasswordArgs | undefined;
            if (!args || args.pgpKey === undefined) {
                throw new Error("Missing required property 'pgpKey'");
            }
            if (!args || args.user === undefined) {
                throw new Error("Missing required property 'user'");
            }
            inputs["host"] = args ? args.host : undefined;
            inputs["pgpKey"] = args ? args.pgpKey : undefined;
            inputs["user"] = args ? args.user : undefined;
            inputs["encryptedPassword"] = undefined /*out*/;
            inputs["keyFingerprint"] = undefined /*out*/;
        }
        super("mysql:index/userPassword:UserPassword", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserPassword resources.
 */
export interface UserPasswordState {
    /**
     * The encrypted password, base64 encoded.
     */
    readonly encryptedPassword?: pulumi.Input<string>;
    /**
     * The source host of the user. Defaults to `localhost`.
     */
    readonly host?: pulumi.Input<string>;
    /**
     * The fingerprint of the PGP key used to encrypt the password 
     */
    readonly keyFingerprint?: pulumi.Input<string>;
    /**
     * Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.
     */
    readonly pgpKey?: pulumi.Input<string>;
    /**
     * The IAM user to associate with this access key.
     */
    readonly user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserPassword resource.
 */
export interface UserPasswordArgs {
    /**
     * The source host of the user. Defaults to `localhost`.
     */
    readonly host?: pulumi.Input<string>;
    /**
     * Either a base-64 encoded PGP public key, or a keybase username in the form `keybase:some_person_that_exists`.
     */
    readonly pgpKey: pulumi.Input<string>;
    /**
     * The IAM user to associate with this access key.
     */
    readonly user: pulumi.Input<string>;
}
