// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.MySql
{
    /// <summary>
    /// The ``mysql..Database`` resource creates and manages a database on a MySQL
    /// server.
    /// 
    /// &gt; **Caution:** The ``mysql..Database`` resource can completely delete your
    /// database just as easily as it can create it. To avoid costly accidents,
    /// consider setting
    /// [``prevent_destroy``](https://www.terraform.io/docs/configuration/resources.html#prevent_destroy)
    /// on your database resources as an extra safety measure.
    /// 
    /// ## Example Usage
    /// 
    /// 
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using MySql = Pulumi.MySql;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var app = new MySql.Database("app", new MySql.DatabaseArgs
    ///         {
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Database : Pulumi.CustomResource
    {
        /// <summary>
        /// The default character set to use when
        /// a table is created without specifying an explicit character set. Defaults
        /// to "utf8".
        /// </summary>
        [Output("defaultCharacterSet")]
        public Output<string?> DefaultCharacterSet { get; private set; } = null!;

        /// <summary>
        /// The default collation to use when a table
        /// is created without specifying an explicit collation. Defaults to
        /// ``utf8_general_ci``. Each character set has its own set of collations, so
        /// changing the character set requires also changing the collation.
        /// </summary>
        [Output("defaultCollation")]
        public Output<string?> DefaultCollation { get; private set; } = null!;

        /// <summary>
        /// The name of the database. This must be unique within
        /// a given MySQL server and may or may not be case-sensitive depending on
        /// the operating system on which the MySQL server is running.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs? args = null, CustomResourceOptions? options = null)
            : base("mysql:index/database:Database", name, args ?? new DatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
            : base("mysql:index/database:Database", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Database(name, id, state, options);
        }
    }

    public sealed class DatabaseArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default character set to use when
        /// a table is created without specifying an explicit character set. Defaults
        /// to "utf8".
        /// </summary>
        [Input("defaultCharacterSet")]
        public Input<string>? DefaultCharacterSet { get; set; }

        /// <summary>
        /// The default collation to use when a table
        /// is created without specifying an explicit collation. Defaults to
        /// ``utf8_general_ci``. Each character set has its own set of collations, so
        /// changing the character set requires also changing the collation.
        /// </summary>
        [Input("defaultCollation")]
        public Input<string>? DefaultCollation { get; set; }

        /// <summary>
        /// The name of the database. This must be unique within
        /// a given MySQL server and may or may not be case-sensitive depending on
        /// the operating system on which the MySQL server is running.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DatabaseArgs()
        {
        }
    }

    public sealed class DatabaseState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default character set to use when
        /// a table is created without specifying an explicit character set. Defaults
        /// to "utf8".
        /// </summary>
        [Input("defaultCharacterSet")]
        public Input<string>? DefaultCharacterSet { get; set; }

        /// <summary>
        /// The default collation to use when a table
        /// is created without specifying an explicit collation. Defaults to
        /// ``utf8_general_ci``. Each character set has its own set of collations, so
        /// changing the character set requires also changing the collation.
        /// </summary>
        [Input("defaultCollation")]
        public Input<string>? DefaultCollation { get; set; }

        /// <summary>
        /// The name of the database. This must be unique within
        /// a given MySQL server and may or may not be case-sensitive depending on
        /// the operating system on which the MySQL server is running.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DatabaseState()
        {
        }
    }
}
